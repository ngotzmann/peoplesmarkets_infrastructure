---
- name: Ensure consul config directory
  ansible.builtin.file:
    path: "{{ consul.config_dir }}"
    state: directory
    owner: consul
    group: consul
    mode: 0775

- name: Copy server ACL configuration
  ansible.builtin.template:
    src: server.acl.hcl.j2
    dest: "{{ consul.config_dir }}/server.acl.hcl"
    owner: consul
    group: consul
    mode: 0664
  when: inventory_hostname in groups.consul_servers

- name: Copy client ACL configuration
  ansible.builtin.template:
    src: client.acl.hcl.j2
    dest: "{{ consul.config_dir }}/client.acl.hcl"
    owner: consul
    group: consul
    mode: 0664
  when: inventory_hostname in groups.consul_clients

# - name: Restart consul service
#   throttle: 1
#   ansible.builtin.service:
#     name: consul
#     state: restarted

# - name: Wait
#   ansible.builtin.pause:
#     seconds: 10

- run_once: true
  delegate_to: localhost
  become: false
  block:
    - name: Initialize ACL
      ansible.builtin.command: consul acl bootstrap -format json
      register: acl_bootstrap_out
      failed_when: acl_bootstrap_out.rc != 0 and not 'Failed ACL bootstrapping' in acl_bootstrap_out.stderr

    - name: Ensure kv secret engine is enabled on vault
      ansible.builtin.command: |
        vault secrets enable -path=kv kv
      register: enable_kv2_out
      failed_when: enable_kv2_out.rc != 0 and 'path is already in use' not in enable_kv2_out.stderr

    - name: Save bootstrap token to vault
      ansible.builtin.command: |
        vault write kv/root/consul/bootstrap_token \
          token={{ acl_bootstrap_out.stdout | from_json | json_query('SecretID') }}
      when: acl_bootstrap_out.rc == 0

    - name: Get consul bootstrap token from vault
      ansible.builtin.command: |
        vault read -field=token \
          kv/root/consul/bootstrap_token
      register: bootstrap_token_out

    - name: Ensure consul secret engine is enabled on vault
      ansible.builtin.command: |
        vault secrets enable -path=consul consul
      register: enable_consul_out
      failed_when: enable_consul_out.rc != 0 and 'path is already in use' not in enable_consul_out.stderr

    - name: Configure consul secret engine
      ansible.builtin.command: |
        vault write consul/config/access \
          address={{ consul.url }} \
          token={{ bootstrap_token_out.stdout }}
      register: configure_consul_secret_engine_out
      failed_when: configure_consul_secret_engine_out.rc != 0 and 'no longer allowed' not in configure_consul_secret_engine_out.stderr

    - name: Create global management role
      ansible.builtin.command: |
        vault write consul/roles/global_management_role \
          policies=global-management

    - name: Get management token
      ansible.builtin.command: |
        vault read -field=token consul/creds/global_management_role
      register: management_token_out

    - set_fact:
        management_token: "{{ management_token_out.stdout }}"

    - name: Ensure working directory
      ansible.builtin.file:
        path: /tmp/consul/acl
        state: directory

    # task sets variable as {{ item }}_token, e.g. "consul_server_token"
    - include_tasks: create-consul-policy-and-vault-role.yaml
      with_items:
        - consul_server
        - consul_client
        - consul_default_dns
        - nomad_server
        - nomad_client

- name: Set default dns token
  ansible.builtin.command: |
    consul acl set-agent-token \
      -token "{{ management_token }}" \
      -http-addr "{{ ansible_eth1.ipv4.address }}:{{ consul.ports.http }}" \
      default "{{ consul_default_dns_token }}"

- name: Set consul server token
  ansible.builtin.command: |
    consul acl set-agent-token \
      -token "{{ management_token }}" \
      -http-addr "{{ ansible_eth1.ipv4.address }}:{{ consul.ports.http }}" \
      agent "{{ consul_server_token }}"
  when: inventory_hostname in groups.consul_servers

- name: Set consul client token
  ansible.builtin.command: |
    consul acl set-agent-token \
      -token "{{ management_token }}" \
      -http-addr "{{ ansible_eth1.ipv4.address }}:{{ consul.ports.http }}" \
      agent "{{ consul_client_token }}"
  when: inventory_hostname in groups.consul_clients
