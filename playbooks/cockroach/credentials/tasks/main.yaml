---
- ansible.builtin.import_tasks: ../../common-tasks/vault_login/vault_login.yaml

- run_once: true
  delegate_to: localhost
  become: false
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  block:
    - name: Ensure working directory
      ansible.builtin.file:
        path: /tmp/cockroach/credentials
        state: directory

    - name: Ensure database secret engine is enabled on vault
      ansible.builtin.command: |
        vault secrets enable -path=database database
      register: enable_database_se_out
      failed_when: enable_database_se_out.rc != 0 and 'path is already in use' not in enable_database_se_out.stderr

    - name: Copy cockroach database config vault policy to working directory
      ansible.builtin.copy:
        src: configure-cockroach-database.policy.hcl
        dest: /tmp/cockroach/credentials/configure-cockroach-database.policy.hcl

    - name: Ensure policy on vault
      ansible.builtin.command: |
        vault policy write configure-cockroach-database \
          /tmp/cockroach/credentials/configure-cockroach-database.policy.hcl

    - name: Get token from vault
      ansible.builtin.command: |
        vault token create -field=token \
          -policy=configure-cockroach-database \
          -period=48h
      register: get_token_out

- when: inventory_hostname in groups.vault
  become: true
  block:
    - ansible.builtin.import_tasks: ../../common-tasks/consul-template/consul-template.yaml

    - ansible.builtin.service:
        name: consul-template@cockroach_database_secrets_ctmpl.service
        state: stopped
        enabled: false
        daemon_reload: true

    - name: Ensure vault database directory
      ansible.builtin.file:
        path: "/opt/vault/database"
        state: directory

    - ansible.builtin.set_fact:
        vault_token: "{{ get_token_out.stdout }}"
        database_roles: "{{ cockroach.roles | join(',') }}"

    - name: Copy database secret engine config template
      ansible.builtin.template:
        src: configure-cockroach-database.json.tpl.j2
        dest: "{{ consul_template.data_dir }}/configure-cockroach-database.json.tpl"
        owner: root
        group: root
        mode: "440"
      register: config_out_1

    - name: Copy vault token template
      ansible.builtin.copy:
        src: configure-cockroach-database-vault.token.tpl
        dest: "{{ consul_template.data_dir }}/configure-cockroach-database-vault.token.tpl"
        owner: root
        group: root
        mode: "440"
      register: config_out_2

    - name: Copy database configuration script
      ansible.builtin.template:
        src: configure-cockroach-database.sh.j2
        dest: /opt/vault/database/configure-cockroach-database.sh
        owner: root
        group: root
        mode: "550"
      register: config_out_3

    - name: Copy database secret engine consul-template config file
      ansible.builtin.template:
        src: configure_cockroach_database_ctmpl.hcl.j2
        dest: "{{ consul_template.config_dir }}/configure_cockroach_database_ctmpl.hcl"
        owner: root
        group: root
        mode: "440"
      register: config_out_4

    - name: Reload consul-template service
      ansible.builtin.service:
        name: consul-template@configure_cockroach_database_ctmpl.service
        state: restarted
        enabled: true
      when: config_out_1.changed or config_out_2.changed or config_out_3.changed or config_out_4.changed

- name: Get global_management user password
  run_once: true
  delegate_to: localhost
  become: false
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  ansible.builtin.command: |
    vault read \
      -field=password \
      kv/cockroach/clients/global_management
  register: global_management_password_out

- when: inventory_hostname == groups.cockroach[0]
  block:
    - ansible.builtin.set_fact:
        global_management_password: "{{ global_management_password_out.stdout }}"

    - name: Create zitadel database and users
      ansible.builtin.command: |
        cockroach sql --url postgresql://global_management:{{ global_management_password }}@127.0.0.1:{{ cockroach.ports.sql }}/defaultdb?sslmode=prefer \
          --execute "CREATE DATABASE IF NOT EXISTS zitadel;" \
          --execute "CREATE USER IF NOT EXISTS zitadel_admin;" \
          --execute "ALTER USER zitadel_admin WITH CREATEDB;" \
          --execute "ALTER USER zitadel_admin WITH CREATEROLE;" \
          --execute "ALTER USER zitadel_admin WITH CREATELOGIN;" \
          --execute "GRANT ALL ON DATABASE zitadel TO zitadel_admin WITH GRANT OPTION;" \
          --execute "CREATE USER IF NOT EXISTS zitadel_user;" \
          --execute "GRANT ALL ON DATABASE zitadel TO zitadel_user WITH GRANT OPTION;"

- name: Create database roles
  run_once: true
  delegate_to: localhost
  become: false
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  block:
    - name: Copy rotation statement to working directory
      ansible.builtin.copy:
        src: rotation.sql
        dest: /tmp/cockroach/credentials/rotation.sql

    - name: Create static zitadel_admin role on vault
      ansible.builtin.command: |
        vault write database/static-roles/zitadel_admin \
          db_name=cockroach \
          rotation_statement=@/tmp/cockroach/credentials/rotation.sql \
          username="zitadel_admin" \
          rotation_period=86400

    - name: Create static zitadel_user role on vault
      ansible.builtin.command: |
        vault write database/static-roles/zitadel_user \
          db_name=cockroach \
          rotation_statement=@/tmp/cockroach/credentials/rotation.sql \
          username="zitadel_user" \
          rotation_period=86400
